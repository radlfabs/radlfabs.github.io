{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import os\n",
    "import zipfile\n",
    "from datetime import datetime\n",
    "from pathlib import Path\n",
    "from pprint import pprint\n",
    "\n",
    "import numpy as np\n",
    "import optuna\n",
    "import pandas as pd\n",
    "import polars as pl\n",
    "import polars.selectors as cs\n",
    "import requests\n",
    "from sklearn.metrics import (mean_absolute_percentage_error,\n",
    "                             root_mean_squared_error)\n",
    "from sklearn.model_selection import TimeSeriesSplit, cross_val_score\n",
    "from xgboost import XGBRegressor\n",
    "\n",
    "from lookup import months_lookup, names_lookup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def read_in(url):\n",
    "    expr = pl.col(\"month\")\n",
    "    for old, new in months_lookup.items():\n",
    "        expr = expr.str.replace_all(old, new)\n",
    "\n",
    "    df = pd.read_csv(\n",
    "        url,\n",
    "        encoding='latin1',\n",
    "        thousands=\".\",\n",
    "        decimal=\",\",\n",
    "        sep=\";\", \n",
    "        index_col=False,\n",
    "    )\n",
    "\n",
    "    df.rename(columns={ df.columns[0]: \"month\" }, inplace = True)\n",
    "    \n",
    "    return (\n",
    "        pl.DataFrame(df)\n",
    "        # .filter(~pl.all_horizontal(pl.all().is_null()))\n",
    "        .rename(names_lookup, strict=False)\n",
    "        .filter(pl.col(\"month\") != \"Jahressumme\")\n",
    "        .with_columns(month = pl.col(\"month\").str.replace(r\"\\d+\", \"\").str.replace(\" \", \"\"))\n",
    "        .with_columns(expr)\n",
    "        .with_columns(date = pl.date(pl.lit(int(url[-9:-5])), pl.col(\"month\"), 1))\n",
    "        .drop(\"month\", \"Hohe Pforte\", \"Neusser Straße\", strict=False)\n",
    "        .unpivot(cs.numeric(), index=\"date\", variable_name=\"location\", value_name=\"count\")\n",
    "        .cast({\"count\": pl.Int64})\n",
    "        .drop_nulls()\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (1_468, 6)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>date</th><th>location</th><th>count</th><th>quarter</th><th>days_from_start</th><th>sin_count</th></tr><tr><td>date</td><td>cat</td><td>i64</td><td>i8</td><td>i64</td><td>f64</td></tr></thead><tbody><tr><td>2022-01-01</td><td>&quot;Deutzer&nbsp;Brücke&quot;</td><td>88423</td><td>1</td><td>4748</td><td>0.5</td></tr><tr><td>2022-02-01</td><td>&quot;Deutzer&nbsp;Brücke&quot;</td><td>83211</td><td>1</td><td>4779</td><td>0.866025</td></tr><tr><td>2022-03-01</td><td>&quot;Deutzer&nbsp;Brücke&quot;</td><td>146113</td><td>1</td><td>4807</td><td>1.0</td></tr><tr><td>2022-04-01</td><td>&quot;Deutzer&nbsp;Brücke&quot;</td><td>138641</td><td>2</td><td>4838</td><td>0.866025</td></tr><tr><td>2022-05-01</td><td>&quot;Deutzer&nbsp;Brücke&quot;</td><td>192947</td><td>2</td><td>4868</td><td>0.5</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>2009-08-01</td><td>&quot;Zülpicher&nbsp;Straße&quot;</td><td>218211</td><td>3</td><td>212</td><td>-0.866025</td></tr><tr><td>2009-09-01</td><td>&quot;Zülpicher&nbsp;Straße&quot;</td><td>185618</td><td>3</td><td>243</td><td>-1.0</td></tr><tr><td>2009-10-01</td><td>&quot;Zülpicher&nbsp;Straße&quot;</td><td>127759</td><td>4</td><td>273</td><td>-0.866025</td></tr><tr><td>2009-11-01</td><td>&quot;Zülpicher&nbsp;Straße&quot;</td><td>105815</td><td>4</td><td>304</td><td>-0.5</td></tr><tr><td>2009-12-01</td><td>&quot;Zülpicher&nbsp;Straße&quot;</td><td>59034</td><td>4</td><td>334</td><td>-2.4493e-16</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (1_468, 6)\n",
       "┌────────────┬──────────────────┬────────┬─────────┬─────────────────┬─────────────┐\n",
       "│ date       ┆ location         ┆ count  ┆ quarter ┆ days_from_start ┆ sin_count   │\n",
       "│ ---        ┆ ---              ┆ ---    ┆ ---     ┆ ---             ┆ ---         │\n",
       "│ date       ┆ cat              ┆ i64    ┆ i8      ┆ i64             ┆ f64         │\n",
       "╞════════════╪══════════════════╪════════╪═════════╪═════════════════╪═════════════╡\n",
       "│ 2022-01-01 ┆ Deutzer Brücke   ┆ 88423  ┆ 1       ┆ 4748            ┆ 0.5         │\n",
       "│ 2022-02-01 ┆ Deutzer Brücke   ┆ 83211  ┆ 1       ┆ 4779            ┆ 0.866025    │\n",
       "│ 2022-03-01 ┆ Deutzer Brücke   ┆ 146113 ┆ 1       ┆ 4807            ┆ 1.0         │\n",
       "│ 2022-04-01 ┆ Deutzer Brücke   ┆ 138641 ┆ 2       ┆ 4838            ┆ 0.866025    │\n",
       "│ 2022-05-01 ┆ Deutzer Brücke   ┆ 192947 ┆ 2       ┆ 4868            ┆ 0.5         │\n",
       "│ …          ┆ …                ┆ …      ┆ …       ┆ …               ┆ …           │\n",
       "│ 2009-08-01 ┆ Zülpicher Straße ┆ 218211 ┆ 3       ┆ 212             ┆ -0.866025   │\n",
       "│ 2009-09-01 ┆ Zülpicher Straße ┆ 185618 ┆ 3       ┆ 243             ┆ -1.0        │\n",
       "│ 2009-10-01 ┆ Zülpicher Straße ┆ 127759 ┆ 4       ┆ 273             ┆ -0.866025   │\n",
       "│ 2009-11-01 ┆ Zülpicher Straße ┆ 105815 ┆ 4       ┆ 304             ┆ -0.5        │\n",
       "│ 2009-12-01 ┆ Zülpicher Straße ┆ 59034  ┆ 4       ┆ 334             ┆ -2.4493e-16 │\n",
       "└────────────┴──────────────────┴────────┴─────────┴─────────────────┴─────────────┘"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "with open(\"links/links.txt\", \"r\") as f:\n",
    "    urls = f.readlines()\n",
    "\n",
    "df = (\n",
    "    pl.concat([read_in(url) for url in urls], rechunk=True)\n",
    "    .with_columns(\n",
    "        location = pl.col(\"location\").cast(pl.Categorical),\n",
    "        quarter = pl.col(\"date\").dt.quarter(),\n",
    "        days_from_start = (pl.col(\"date\") - pl.col(\"date\").min()).dt.total_days(),\n",
    "        sin_count = (pl.col(\"date\").dt.month() * 2 * math.pi / 12).sin()\n",
    "        )\n",
    ")\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather_url = Path(\"links/weather.txt\").read_text()\n",
    "data_path = Path(\"data\")\n",
    "zip_path = data_path / \"weather.zip\"\n",
    "data_path.mkdir(exist_ok=True)\n",
    "\n",
    "response = requests.get(weather_url)\n",
    "with open(zip_path, 'wb') as file:\n",
    "    file.write(response.content)\n",
    "\n",
    "with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
    "    zip_ref.extractall(data_path)\n",
    "\n",
    "weather_csv = [os.path.join(data_path, f) for f in os.listdir(data_path) if 'produkt' in f][0]\n",
    "\n",
    "weather_df = (\n",
    "    pl.read_csv(\n",
    "        weather_csv, \n",
    "        separator=\";\", \n",
    "        has_header=True,\n",
    "        schema=pl.Schema(\n",
    "            {\n",
    "                \"station_id\": pl.Int64,\n",
    "                \"date_begin\": pl.String,\n",
    "                \"date_end\": pl.Int64,\n",
    "                \"qn_4\": pl.Int64,\n",
    "                \"sky_cov\": pl.Float64,\n",
    "                \"air_temp_daymean_month_mean\": pl.Float64,\n",
    "                \"air_temp_daymax_month_mean\": pl.Float64,\n",
    "                \"air_temp_daymin_month_mean\": pl.Float64,\n",
    "                \"air_temp_daymax_month_max\": pl.Float64,\n",
    "                \"air_temp_daymin_month_min\": pl.Float64,\n",
    "                \"wind_speed_month_mean\": pl.Float64,  # MO_FK\n",
    "                \"wind_speed_daymax_month_max\": pl.Float64,  # MX_FX\n",
    "                \"sunshine_duration\": pl.Float64,  # MO_SD_S\n",
    "                \"QN_6\": pl.Int64,\n",
    "                \"precipitation_month_sum\": pl.Float64,\n",
    "                \"precipitation_daymax_month_max\": pl.Float64,\n",
    "                \"eor\": pl.String\n",
    "            }\n",
    "        )\n",
    "        )\n",
    "        .with_columns(\n",
    "            date = pl.col(\"date_begin\").str.to_date(format=\"%Y%m%d\")\n",
    "        )\n",
    "        .select(pl.col(\"date\"), cs.numeric())\n",
    "        .select(cs.exclude(\"qn_4\", \"eor\", \"QN_6\", \"station_id\", \"date_end\"))\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "ml_data = df.join(weather_df, on=\"date\", how=\"left\")\n",
    "\n",
    "test_data = ml_data.filter(pl.col(\"date\") >= datetime(2022, 1, 1)).drop(\"date\").to_pandas()\n",
    "train_data = ml_data.filter(pl.col(\"date\") < datetime(2022, 1, 1)).drop(\"date\").to_pandas()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "ts_cv = TimeSeriesSplit(\n",
    "    n_splits=5,\n",
    "    gap=2,\n",
    "    test_size=12\n",
    "    )\n",
    "\n",
    "X_train = train_data.drop(\"count\", axis=1)\n",
    "y_train = train_data[\"count\"]\n",
    "\n",
    "def objective(trial):\n",
    "\n",
    "    xgbr = XGBRegressor(\n",
    "            n_estimators=2000,\n",
    "            # n_estimators=trial.suggest_int(\"n_estimators\", 100, 2000),\n",
    "            learning_rate=trial.suggest_float(\"eta\", 0.0001, 1),\n",
    "            gamma=trial.suggest_int('gamma', 0, 1000),\n",
    "            max_depth=trial.suggest_int(\"max_depth\", 1, 50),\n",
    "            min_child_weight=trial.suggest_int('min_child_weight', 0, 100),\n",
    "            max_delta_step=trial.suggest_int('max_delta_step', 0, 100),\n",
    "            subsample=trial.suggest_float('subsample', 0, 1),\n",
    "            colsample_bytree=trial.suggest_float('colsample_bytree', 0, 1),\n",
    "            reg_alpha=trial.suggest_int('reg_alpha', 0, 1000),\n",
    "            reg_lambda=trial.suggest_int('reg_lambda', 0, 1000),\n",
    "            enable_categorical=True,\n",
    "            random_state=42,\n",
    "        )\n",
    "\n",
    "    cv_score = cross_val_score(\n",
    "        xgbr,\n",
    "        X=X_train,\n",
    "        y=y_train,\n",
    "        cv=ts_cv,\n",
    "        scoring=\"neg_root_mean_squared_error\"\n",
    "    )\n",
    "\n",
    "    return -cv_score.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2024-11-25 15:32:22,753] A new study created in memory with name: no-name-e39218cd-8d8d-4c69-b783-7d4d5a3e3e02\n",
      "[I 2024-11-25 15:32:25,026] Trial 0 finished with value: 47137.35825969654 and parameters: {'eta': 0.007563829331520405, 'gamma': 467, 'max_depth': 34, 'min_child_weight': 24, 'max_delta_step': 93, 'subsample': 0.26143553149396426, 'colsample_bytree': 0.29941413883802603, 'reg_alpha': 851, 'reg_lambda': 872}. Best is trial 0 with value: 47137.35825969654.\n",
      "[I 2024-11-25 15:32:28,063] Trial 1 finished with value: 23166.251071524304 and parameters: {'eta': 0.956426538381638, 'gamma': 122, 'max_depth': 46, 'min_child_weight': 39, 'max_delta_step': 49, 'subsample': 0.5887057896192655, 'colsample_bytree': 0.8926983405271944, 'reg_alpha': 959, 'reg_lambda': 770}. Best is trial 1 with value: 23166.251071524304.\n",
      "[I 2024-11-25 15:32:30,837] Trial 2 finished with value: 23779.987969671638 and parameters: {'eta': 0.7338016007985851, 'gamma': 907, 'max_depth': 27, 'min_child_weight': 54, 'max_delta_step': 82, 'subsample': 0.9157509090837518, 'colsample_bytree': 0.33926083431681753, 'reg_alpha': 952, 'reg_lambda': 477}. Best is trial 1 with value: 23166.251071524304.\n"
     ]
    }
   ],
   "source": [
    "N_TRIALS = 3\n",
    "\n",
    "study = optuna.create_study(direction=\"minimize\")\n",
    "optuna.logging.set_verbosity(optuna.logging.INFO)\n",
    "study.optimize(objective, n_trials=N_TRIALS)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # tss = TimeSeriesSplit(n_splits=10)\n",
    "# ts_cv = TimeSeriesSplit(\n",
    "#     n_splits=5,\n",
    "#     gap=2,\n",
    "#     test_size=6\n",
    "#     )\n",
    "\n",
    "# multi_model_studies = {}\n",
    "\n",
    "# for group_name, group_data in train_large_clusters.groupby([\"location\"]):\n",
    "#     X_group_data = group_data.drop(\"count\", axis=1)\n",
    "#     y_group_data = group_data[\"count\"]\n",
    "\n",
    "\n",
    "#     def multi_model_objective(trial):\n",
    "\n",
    "#         xgbr = XGBRegressor(\n",
    "#                 n_estimators=2000,\n",
    "#                 # n_estimators=trial.suggest_int(\"n_estimators\", 100, 2000),\n",
    "#                 learning_rate=trial.suggest_float(\"eta\", 0.0001, 1),\n",
    "#                 gamma=trial.suggest_int('gamma', 0, 1000),\n",
    "#                 max_depth=trial.suggest_int(\"max_depth\", 1, 50),\n",
    "#                 min_child_weight=trial.suggest_int('min_child_weight', 0, 100),\n",
    "#                 max_delta_step=trial.suggest_int('max_delta_step', 0, 100),\n",
    "#                 subsample=trial.suggest_float('subsample', 0, 1),\n",
    "#                 colsample_bytree=trial.suggest_float('colsample_bytree', 0, 1),\n",
    "#                 reg_alpha=trial.suggest_int('reg_alpha', 0, 1000),\n",
    "#                 reg_lambda=trial.suggest_int('reg_lambda', 0, 1000),\n",
    "#                 enable_categorical=True,\n",
    "#                 random_state=42,\n",
    "#             )\n",
    "\n",
    "#         cv_score = cross_val_score(\n",
    "#             xgbr,\n",
    "#             X=X_group_data,\n",
    "#             y=y_group_data,\n",
    "#             cv=ts_cv,\n",
    "#             scoring=\"neg_mean_absolute_error\"\n",
    "#         )\n",
    "\n",
    "#         return -cv_score.mean()\n",
    "    \n",
    "#     study = optuna.create_study(direction=\"minimize\")\n",
    "#     optuna.logging.set_verbosity(optuna.logging.INFO)\n",
    "#     study.optimize(multi_model_objective, n_trials=10)\n",
    "\n",
    "#     multi_model_studies[group_name[0]] = study"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE 23166.251071524304\n",
      "{'colsample_bytree': 0.8926983405271944,\n",
      " 'eta': 0.956426538381638,\n",
      " 'gamma': 122,\n",
      " 'max_delta_step': 49,\n",
      " 'max_depth': 46,\n",
      " 'min_child_weight': 39,\n",
      " 'reg_alpha': 959,\n",
      " 'reg_lambda': 770,\n",
      " 'subsample': 0.5887057896192655}\n"
     ]
    }
   ],
   "source": [
    "print(f\"RMSE {study.best_trial.value}\")\n",
    "pprint(study.best_trial.params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                          rmse  mape\n",
      "Deutzer Brücke         59640.0  0.31\n",
      "Hohenzollernbrücke     22446.0  0.32\n",
      "Neumarkt               40661.0  0.25\n",
      "Zülpicher Straße       60479.0  0.34\n",
      "Bonner Straße          14901.0  0.17\n",
      "Venloer Straße         78419.0  0.42\n",
      "Vorgebirgswall         17212.0  0.17\n",
      "Universitätsstraße     56027.0  0.28\n",
      "A.-Schütte-Allee       34167.0  0.71\n",
      "Vorgebirgspark         58486.0  2.10\n",
      "A.-Silbermann-Weg      20584.0  0.24\n",
      "Stadtwald              27282.0  0.44\n",
      "Niederländer Ufer      28896.0  0.49\n",
      "Rodenkirchener Brücke  41449.0  1.05\n",
      "Severinsbrücke         42664.0  0.98\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\rosen\\AppData\\Local\\Temp\\ipykernel_28984\\1453110037.py:8: FutureWarning:\n",
      "\n",
      "The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# REFIT\n",
    "best_params = study.best_params\n",
    "best_xgbr = XGBRegressor(**best_params, enable_categorical=True, random_state=42)\n",
    "best_xgbr.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions on the holdout test data\n",
    "metrics_by_location = {}\n",
    "for location, group in test_data.groupby('location'):\n",
    "    X_test = group.drop(\"count\", axis=1)\n",
    "    y_test = group[\"count\"]\n",
    "    y_pred = best_xgbr.predict(X_test)\n",
    "    \n",
    "    metrics_by_location[location] = {\n",
    "        \"rmse\": np.round(root_mean_squared_error(y_test, y_pred)),\n",
    "        \"mape\": np.round(mean_absolute_percentage_error(y_test, y_pred),2)\n",
    "    }\n",
    "\n",
    "# Convert the metrics dictionary to a DataFrame for better readability\n",
    "metrics_df = pd.DataFrame(metrics_by_location).T\n",
    "\n",
    "# metrics on holdout\n",
    "print(metrics_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 location     size   latitude  longitude\n",
      "0          Deutzer Brücke  59640.0  50.936406   6.966189\n",
      "1      Hohenzollernbrücke  22446.0  50.941438   6.965704\n",
      "2                Neumarkt  40661.0  50.936038   6.947659\n",
      "3        Zülpicher Straße  60479.0  50.923669   6.925765\n",
      "4           Bonner Straße  14901.0  50.914728   6.961433\n",
      "5          Venloer Straße  78419.0  50.962832   6.889204\n",
      "6          Vorgebirgswall  17212.0  50.918708   6.949154\n",
      "7      Universitätsstraße  56027.0  50.929546   6.927551\n",
      "8        A.-Schütte-Allee  34167.0  50.924132   6.974647\n",
      "9          Vorgebirgspark  58486.0  50.910604   6.950924\n",
      "10      A.-Silbermann-Weg  20584.0  50.929392   6.930844\n",
      "11              Stadtwald  27282.0  50.929646   6.897004\n",
      "12      Niederländer Ufer  28896.0  50.959041   6.979373\n",
      "13  Rodenkirchener Brücke  41449.0  50.899807   6.990679\n",
      "14         Severinsbrücke  42664.0  50.930706   6.967302\n"
     ]
    }
   ],
   "source": [
    "import plotly.express as px\n",
    "from geopy.geocoders import Nominatim\n",
    "\n",
    "geolocator = Nominatim(user_agent=\"myapp\")\n",
    "coordinates = {}\n",
    "for loc in train_data[\"location\"].unique():\n",
    "    tmp = geolocator.geocode(loc + \", Köln, Germany\")\n",
    "    coordinates[loc] = {\n",
    "        \"size\": metrics_df[\"rmse\"].loc[loc],\n",
    "        \"latitude\": tmp.latitude,\n",
    "        \"longitude\": tmp.longitude\n",
    "    }\n",
    "\n",
    "counter_geo = pd.DataFrame(coordinates).T.reset_index().rename(columns={\"index\": \"location\"})\n",
    "print(counter_geo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 6.7725304 , 50.83044941,  7.162028  , 51.08496276])"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import plotly.graph_objects as go\n",
    "import geopandas as gpd\n",
    "import matplotlib.pyplot as plt\n",
    "from adjustText import adjust_text\n",
    "\n",
    "points = gpd.GeoDataFrame(\n",
    "    counter_geo, geometry=gpd.points_from_xy(counter_geo.longitude, counter_geo.latitude), crs=\"EPSG:4326\"\n",
    ")\n",
    "\n",
    "cologne = gpd.read_file(\"data/cologne.geojson\")\n",
    "rhine = gpd.read_file(\"data/rhine.geojson\").clip(cologne.total_bounds)\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(4,4), dpi=200)\n",
    "cologne.plot(ax=ax, color=\"white\", edgecolor=\"black\", zorder=0)\n",
    "rhine.plot(ax=ax, zorder=1)\n",
    "points.plot(ax=ax, color=\"darkred\", markersize=metrics_df[\"rmse\"] / 10000, zorder=2)\n",
    "\n",
    "# add background\n",
    "ax.set_facecolor('grey')\n",
    "\n",
    "# remove axes\n",
    "ax.set_yticklabels([])\n",
    "ax.set_xticklabels([])\n",
    "# remove tickmarks\n",
    "ax.xaxis.set_ticks_position('none')\n",
    "ax.yaxis.set_ticks_position('none')\n",
    "\n",
    "# make annotation\n",
    "texts = []\n",
    "for x, y, label in zip(points.geometry.x, points.geometry.y, points[\"location\"]):\n",
    "    texts.append(ax.text(x, y, label, color='black', fontsize=3))\n",
    "\n",
    "# place text in the upper right corner of the plot\n",
    "ax.text(0.99, 0.99, 'Cologne Bicycle Counter', verticalalignment='top', horizontalalignment='right',\n",
    "        transform=ax.transAxes,\n",
    "        color='black', fontsize=8)\n",
    "adjust_text(texts, \n",
    "            arrowprops=dict(arrowstyle=\"->\",\n",
    "            color='r', \n",
    "            lw=0.5), ax=ax)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>@id</th>\n",
       "      <th>CEMT</th>\n",
       "      <th>TMC:cid_58:tabcd_1:Class</th>\n",
       "      <th>TMC:cid_58:tabcd_1:LCLversion</th>\n",
       "      <th>TMC:cid_58:tabcd_1:LocationCode</th>\n",
       "      <th>admin_level</th>\n",
       "      <th>alt_name</th>\n",
       "      <th>boat</th>\n",
       "      <th>boundary</th>\n",
       "      <th>...</th>\n",
       "      <th>tunnel</th>\n",
       "      <th>type</th>\n",
       "      <th>waterway</th>\n",
       "      <th>whitewater:section_grade</th>\n",
       "      <th>whitewater:section_name</th>\n",
       "      <th>width</th>\n",
       "      <th>wikidata</th>\n",
       "      <th>wikipedia</th>\n",
       "      <th>@relations</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>relation/123924</td>\n",
       "      <td>relation/123924</td>\n",
       "      <td>None</td>\n",
       "      <td>Area</td>\n",
       "      <td>9.00</td>\n",
       "      <td>6041</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>waterway</td>\n",
       "      <td>river</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>Q584</td>\n",
       "      <td>de:Rhein</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTILINESTRING ((9.40781 46.82345, 9.40896 46...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>way/11018223</td>\n",
       "      <td>way/11018223</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>river</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>[ { \"role\": \"side_stream\", \"rel\": 123924, \"rel...</td>\n",
       "      <td>LINESTRING (8.2975 47.58926, 8.29737 47.59217,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>way/58741598</td>\n",
       "      <td>way/58741598</td>\n",
       "      <td>VIb</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "      <td>None</td>\n",
       "      <td>yes</td>\n",
       "      <td>administrative</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>river</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>230</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>[ { \"role\": \"main_stream\", \"rel\": 123924, \"rel...</td>\n",
       "      <td>LINESTRING (8.26149 48.98099, 8.26401 48.98236...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>way/77764377</td>\n",
       "      <td>way/77764377</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>6</td>\n",
       "      <td>Alpenrhein</td>\n",
       "      <td>no</td>\n",
       "      <td>administrative</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>river</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>[ { \"role\": \"main_stream\", \"rel\": 123924, \"rel...</td>\n",
       "      <td>LINESTRING (9.66451 47.45277, 9.66524 47.45356...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>way/77764378</td>\n",
       "      <td>way/77764378</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>Alpenrhein</td>\n",
       "      <td>no</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>river</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>Q13142473</td>\n",
       "      <td>None</td>\n",
       "      <td>[ { \"role\": \"main_stream\", \"rel\": 123924, \"rel...</td>\n",
       "      <td>LINESTRING (9.66648 47.45518, 9.66719 47.45622...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>way/1337145279</td>\n",
       "      <td>way/1337145279</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>no</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>river</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>LINESTRING (8.61656 47.67704, 8.61669 47.67788...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72</th>\n",
       "      <td>way/1337145280</td>\n",
       "      <td>way/1337145280</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>no</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>river</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>LINESTRING (8.6151 47.6789, 8.61504 47.67897, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73</th>\n",
       "      <td>way/1337145281</td>\n",
       "      <td>way/1337145281</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>no</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>river</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>LINESTRING (8.61651 47.67825, 8.61612 47.67854...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>way/1337145284</td>\n",
       "      <td>way/1337145284</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>no</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>river</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>LINESTRING (8.61651 47.67825, 8.61625 47.67869)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>way/1337145285</td>\n",
       "      <td>way/1337145285</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>no</td>\n",
       "      <td>None</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>river</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>LINESTRING (8.61514 47.67895, 8.61504 47.67897)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>76 rows × 76 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 id              @id  CEMT TMC:cid_58:tabcd_1:Class  \\\n",
       "0   relation/123924  relation/123924  None                     Area   \n",
       "1      way/11018223     way/11018223  None                     None   \n",
       "2      way/58741598     way/58741598   VIb                     None   \n",
       "3      way/77764377     way/77764377  None                     None   \n",
       "4      way/77764378     way/77764378  None                     None   \n",
       "..              ...              ...   ...                      ...   \n",
       "71   way/1337145279   way/1337145279  None                     None   \n",
       "72   way/1337145280   way/1337145280  None                     None   \n",
       "73   way/1337145281   way/1337145281  None                     None   \n",
       "74   way/1337145284   way/1337145284  None                     None   \n",
       "75   way/1337145285   way/1337145285  None                     None   \n",
       "\n",
       "   TMC:cid_58:tabcd_1:LCLversion TMC:cid_58:tabcd_1:LocationCode admin_level  \\\n",
       "0                           9.00                            6041        None   \n",
       "1                           None                            None        None   \n",
       "2                           None                            None           4   \n",
       "3                           None                            None           6   \n",
       "4                           None                            None        None   \n",
       "..                           ...                             ...         ...   \n",
       "71                          None                            None        None   \n",
       "72                          None                            None        None   \n",
       "73                          None                            None        None   \n",
       "74                          None                            None        None   \n",
       "75                          None                            None        None   \n",
       "\n",
       "      alt_name  boat        boundary  ... tunnel      type waterway  \\\n",
       "0         None  None            None  ...   None  waterway    river   \n",
       "1         None  None            None  ...   None      None    river   \n",
       "2         None   yes  administrative  ...   None      None    river   \n",
       "3   Alpenrhein    no  administrative  ...   None      None    river   \n",
       "4   Alpenrhein    no            None  ...   None      None    river   \n",
       "..         ...   ...             ...  ...    ...       ...      ...   \n",
       "71        None    no            None  ...   None      None    river   \n",
       "72        None    no            None  ...   None      None    river   \n",
       "73        None    no            None  ...   None      None    river   \n",
       "74        None    no            None  ...   None      None    river   \n",
       "75        None    no            None  ...   None      None    river   \n",
       "\n",
       "   whitewater:section_grade whitewater:section_name width   wikidata  \\\n",
       "0                      None                    None  None       Q584   \n",
       "1                      None                    None  None       None   \n",
       "2                      None                    None   230       None   \n",
       "3                      None                    None  None       None   \n",
       "4                      None                    None  None  Q13142473   \n",
       "..                      ...                     ...   ...        ...   \n",
       "71                     None                    None  None       None   \n",
       "72                     None                    None  None       None   \n",
       "73                     None                    None  None       None   \n",
       "74                     None                    None  None       None   \n",
       "75                     None                    None  None       None   \n",
       "\n",
       "   wikipedia                                         @relations  \\\n",
       "0   de:Rhein                                               None   \n",
       "1       None  [ { \"role\": \"side_stream\", \"rel\": 123924, \"rel...   \n",
       "2       None  [ { \"role\": \"main_stream\", \"rel\": 123924, \"rel...   \n",
       "3       None  [ { \"role\": \"main_stream\", \"rel\": 123924, \"rel...   \n",
       "4       None  [ { \"role\": \"main_stream\", \"rel\": 123924, \"rel...   \n",
       "..       ...                                                ...   \n",
       "71      None                                               None   \n",
       "72      None                                               None   \n",
       "73      None                                               None   \n",
       "74      None                                               None   \n",
       "75      None                                               None   \n",
       "\n",
       "                                             geometry  \n",
       "0   MULTILINESTRING ((9.40781 46.82345, 9.40896 46...  \n",
       "1   LINESTRING (8.2975 47.58926, 8.29737 47.59217,...  \n",
       "2   LINESTRING (8.26149 48.98099, 8.26401 48.98236...  \n",
       "3   LINESTRING (9.66451 47.45277, 9.66524 47.45356...  \n",
       "4   LINESTRING (9.66648 47.45518, 9.66719 47.45622...  \n",
       "..                                                ...  \n",
       "71  LINESTRING (8.61656 47.67704, 8.61669 47.67788...  \n",
       "72  LINESTRING (8.6151 47.6789, 8.61504 47.67897, ...  \n",
       "73  LINESTRING (8.61651 47.67825, 8.61612 47.67854...  \n",
       "74    LINESTRING (8.61651 47.67825, 8.61625 47.67869)  \n",
       "75    LINESTRING (8.61514 47.67895, 8.61504 47.67897)  \n",
       "\n",
       "[76 rows x 76 columns]"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rhine"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
